// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  password      String
  username      String          @unique
  name          String?
  email         String?         @unique
  admin         Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  transactions  Transaction[]  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}



model Material {
  id        Int       @id @default(autoincrement())
  size_length Float
  size_height Float
  size_width  Float
  weight    Float
  type      String
  lesto_code String @unique
  inventories Inventory[]
}


model Inventory {
  id            Int       @id @default(autoincrement())
  materialId    Int
  stillageId    Int
  cellId        Int
  lot           String
  order         String
  quan_dev      Int @default(0)
  quan_ok       Int @default(0)
  comment       String?
  desc          String?
  deliveryDate  DateTime @default(now())
  inboundDate   DateTime @default(now())

  material      Material   @relation(fields: [materialId], references: [id], onDelete: Cascade)
  stillage      Stillage   @relation(fields: [stillageId], references: [id], onDelete: Cascade)
  cell          Cell       @relation(fields: [cellId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
}

model Stillage {
  id       Int       @id @default(autoincrement())
  name     String
  shelves  Int
  columns  Int
  cells    Cell[]
  inventories Inventory[]
}

model Cell {
  id          Int       @id @default(autoincrement())
  stillageId  Int
  code        String
  size_length Float
  size_height Float
  size_width  Float
  max_weight  Float
  isolator    Boolean

  stillage    Stillage  @relation(fields: [stillageId], references: [id], onDelete: Cascade)
  inventories Inventory[]
}

model Transaction {
  id          String    @id @default(cuid())
  type        String
  inventoryId Int
  userId      String
  date        DateTime  @default(now())

  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
